#!/usr/bin/env python2

import subprocess as sp
import xml.etree.ElementTree as ET
import time
import curses as crs

pnum_last = 0

def display_gpu_info(root, scr, start_line):

    gpunum = 0
    display = False
    ##n = int(root.find('attached_gpus').text)

    for gpu in root.findall('gpu'):
        
        # Name
        name = gpu.find('product_name').text
        
        # Display Usage
        display_active = gpu.find('display_active').text
        if display_active == 'Enabled':
            display = True

        # Memory Use
        mem = gpu.find('memory_usage')
        if (mem == None):
            mem = gpu.find('fb_memory_usage')

        memu = mem.find('used').text.split()[0]
        memt = mem.find('total').text
        nmemt = memt.split()
        memuse = memu + '/' + memt
        usage = float(memu)*100/float(nmemt[0])
        
        # Core Utilization
        util = gpu.find('utilization')
        gpu_util = util.find('gpu_util').text.split()[0]
        ngpu_util = float(gpu_util)
        
        # Power Use
        pow = gpu.find('power_readings')
        upow = pow.find('power_draw').text
        tpow = pow.find('power_limit').text
        powuse = upow + '/' + tpow
        
        # Temp
        temp = gpu.find('temperature')
        temp = temp.find('gpu_temp').text
        
        line = '%3d' % (gpunum+1)
        if display:
            line = line + '%24s*' % name
        else:
            line = line + '%25s' % name
        _memall = memuse + ' ' + '[%.1f%%]' % usage
#        line = line + '%9.2f %%' % ngpu_util + '%20s' % memuse + '%10.2f %%' % usage + '%20s' % powuse + '%10s' % temp
        line = line + '%10s %%' % ngpu_util + '%25s' % _memall + '%20s' % powuse + '%10s' % temp

        scr.addstr(gpunum + start_line, 0, line)

        gpunum = gpunum+1

    if display:
        scr.addstr(gpunum + start_line, 0, '*GPU Driving System Display')
    else:
        scr.addstr(gpunum + start_line, 0, 'No GPUs Driving System Display')

def count_procs(root):

    nproc = 0

    for gpu in root.findall('gpu'):
        for pro in ['processes', 'compute_processes', 'accounted_processes']:
            procs = gpu.findall(pro)
            nproc = nproc + len(procs)

    return nproc

def display_proc_info(root, scr, start_line):

    gpunum = 0
    pnum = 0

    for gpu in root.findall('gpu'):
        
        procs = gpu.find('processes')

        for proc in procs.findall('process_info'):

            pid = proc.find('pid').text
            name = proc.find('process_name').text
            if len(name) > 50:
                name = name[0:50] + '...'
            memuse = proc.find('used_memory').text
            
            line = '%3s' % repr(pnum) + '%8s' % repr(gpunum+1) + '%8s' % pid
            line = line + '%62s' % name + '%14s' % memuse
            
            scr.addstr(pnum + start_line, 0, line)
            pnum = pnum + 1

        gpunum = gpunum + 1

    global pnum_last
    pnum_change = pnum - pnum_last
    pnum_last = pnum
    if (pnum_change < 0):
        # adding blank lines to clear old processes
        for i in range(0,-1*pnum_change):
            scr.addstr(pnum + start_line, 0, ' ' * 95)
            pnum = pnum + 1

# ---Main Section---
if __name__ == '__main__':

    scr = crs.initscr()
    scr.keypad(1)

    try:
        
        width = 95
        
        data = sp.check_output(['nvidia-smi', '-q', '-x'])
        root = ET.fromstring(data)

        timestamp = root.find('timestamp').text
        driver = root.find('driver_version').text
        ngpu = int(root.find('attached_gpus').text)
        nproc = count_procs(root)

        scr.addstr(0, 0, 'nvidia-top' + '%*s' % (width-10, 'ESC to quit'))
        scr.addstr(1, 0, 'Timestamp:\t' + timestamp)
        scr.addstr(2, 0, 'Driver Version:\t' + driver)
        scr.addstr(3, 0, 'Number of GPUs:\t' + repr(ngpu))
    
        # Drawing GPU Header
        gpu_startline = 5
        scr.addstr(gpu_startline, 0, '-' * width)
        scr.addstr(gpu_startline + 1, 0, '%3s' % '#' + '%25s' % 'Name' + '%12s' % 'GPU Util' + '%25s' % 'Memory Usage' + '%20s' % 'Power Consumation' + '%10s' % 'Temp')
        scr.addstr(gpu_startline + 2, 0, '-' * width)
        gpu_endline = gpu_startline + 3
        
        # Drawing Proc Header
        proc_startline = gpu_endline + ngpu + 2
        scr.addstr(proc_startline, 0, '-' * width)
        scr.addstr(proc_startline + 1, 0, '%3s' % '#' + '%8s' % 'GPU' + '%8s' % 'PID' + '%62s' % 'Process Name' + '%14s' % 'Mem. Use')
        scr.addstr(proc_startline + 2, 0, '-' * width)
        proc_endline = proc_startline + 3

        footer_startline = proc_endline + nproc + 10

        # 10 tenths = 1 sec <- this is the polling frequency
        crs.halfdelay(10)
        
        while (1):
            
            data = sp.check_output(['nvidia-smi', '-q', '-x'])
            root = ET.fromstring(data)
            
            timestamp = root.find('timestamp').text
            scr.addstr(1, 0, 'Timestamp:\t' + timestamp)
            
            display_gpu_info(root, scr, gpu_endline)
            display_proc_info(root, scr, proc_endline)

            scr.refresh()

            key = scr.getch()
            if (key == 27):
                break

    except:
        crs.endwin()
        print ('Something went wrong! Exception handling is pretty basic right now.')
        raise

    crs.endwin()
